//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC_DB_First.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class restatedbEntities : DbContext
    {
        public restatedbEntities()
            : base("name=restatedbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int sp_InsertProperty(Nullable<System.Guid> propertyID, string location, Nullable<int> typeid, Nullable<decimal> price, Nullable<int> bed, Nullable<int> bath)
        {
            var propertyIDParameter = propertyID.HasValue ?
                new ObjectParameter("PropertyID", propertyID) :
                new ObjectParameter("PropertyID", typeof(System.Guid));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("Typeid", typeid) :
                new ObjectParameter("Typeid", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(int));
    
            var bathParameter = bath.HasValue ?
                new ObjectParameter("Bath", bath) :
                new ObjectParameter("Bath", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertProperty", propertyIDParameter, locationParameter, typeidParameter, priceParameter, bedParameter, bathParameter);
        }
    
        public virtual int sp_InsertUser(string name, string email, string password, string retype)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var retypeParameter = retype != null ?
                new ObjectParameter("Retype", retype) :
                new ObjectParameter("Retype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUser", nameParameter, emailParameter, passwordParameter, retypeParameter);
        }
    
        public virtual ObjectResult<sp_Loginuser_Result> sp_Loginuser(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Loginuser_Result>("sp_Loginuser", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_GetProperty_Result> sp_GetProperty(Nullable<decimal> minprice, Nullable<decimal> maxprice)
        {
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(decimal));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProperty_Result>("sp_GetProperty", minpriceParameter, maxpriceParameter);
        }
    }
}
